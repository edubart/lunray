local mat4 <aligned(32)> = @number[4][4]

local function mat4_eye(): mat4
  return mat4{
    {1,0,0,0},
    {0,1,0,0},
    {0,0,1,0},
    {0,0,0,1}
  }
end

local function mat4_add(A: mat4, B: mat4): mat4
  local R: mat4
  ## for i=0,3 do
    ## for j=0,3 do
      R[#[i]#][#[j]#] = A[#[i]#][#[j]#] + B[#[i]#][#[j]#]
    ## end
  ## end
  return R
end

local function mat4_sub(A: mat4, B: mat4): mat4 <inline>
  local R: mat4
  ## for i=0,3 do
    ## for j=0,3 do
      R[#[i]#][#[j]#] = A[#[i]#][#[j]#] - B[#[i]#][#[j]#]
    ## end
  ## end
  return R
end

local function mat4_transpose(A: mat4): mat4 <inline>
  local R: mat4
  ## for i=0,3 do
    ## for j=0,3 do
      R[#[i]#][#[j]#] = A[#[j]#][#[i]#]
    ## end
  ## end
  return R
end

local function mat4_mul(A: mat4, B: mat4): mat4
  local C: mat4
  ## for i=0,3 do
    ## for j=0,3 do
      ## for k=0,3 do
        C[#[i]#][#[j]#] = C[#[i]#][#[j]#] + A[#[i]#][#[k]#] * B[#[k]#][#[j]#]
      ## end
    ## end
  ## end
  return C
end

local function mat4_smul(A: mat4, x: number): mat4
  local R: mat4
  ## for i=0,3 do
    ## for j=0,3 do
      R[#[i]#][#[j]#] = A[#[i]#][#[j]#] * x
    ## end
  ## end
  return R
end

local function mat4_print(A: mat4)
  ## for i=0,3 do
    print(A[#[i]#][0], A[#[i]#][1], A[#[i]#][2], A[#[i]#][3])
  ## end
end
