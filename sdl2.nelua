-- import SDL headers
!!cdefine 'SDL_DISABLE_IMMINTRIN_H'
!!cinclude '<SDL2/SDL.h>'
!!linklib 'SDL2'

-- import SDL types
global SDL_Keysym = @record {
  scancode: cint,
  sym: int32,
  mod: uint16,
  unused: uint32
}
global SDL_KeyboardEvent = @record {
  type: uint32,
  timestamp: uint32,
  windowID: uint32,
  state: uint8,
  repeated: uint8,
  padding: uint16,
  keysym: SDL_Keysym
}
global SDL_Surface = @record{
  flags: uint32,
  format: pointer,
  w: cint,
  h: cint,
  pitch: cint,
  pixels: pointer
}
global SDL_Event = @record{type: uint32, padding: array<byte, 56>}
global SDL_Rect = @record{x: cint, y: cint, w: cint, h: cint}
global SDL_WindowPtr = @record{}*
global SDL_RendererPtr = @record{}*
global SDL_TexturePtr = @record{}*

-- import SDL constants
global SDL_INIT_VIDEO: uint32 !cimport
global SDL_WINDOWPOS_UNDEFINED: cint !cimport
global SDL_WINDOW_OPENGL: uint32 !cimport
global SDL_QUIT: uint32 !cimport
global SDL_KEYDOWN: uint32 !cimport
global SDLK_UP: int32 !cimport
global SDLK_DOWN: int32 !cimport
global SDLK_LEFT: int32 !cimport
global SDLK_RIGHT: int32 !cimport
global SDLK_a: int32 !cimport
global SDLK_w: int32 !cimport
global SDLK_s: int32 !cimport
global SDLK_d: int32 !cimport
global SDLK_e: int32 !cimport
global SDLK_q: int32 !cimport
global SDL_PIXELFORMAT_ARGB8888: uint32 !cimport
global SDL_BLENDMODE_NONE: int32 !cimport
global SDL_RENDERER_ACCELERATED: uint32 !cimport
global SDL_RENDERER_PRESENTVSYNC: uint32 !cimport
global SDL_RENDERER_SOFTWARE: uint32 !cimport
global SDL_TEXTUREACCESS_STREAMING: cint !cimport

-- import SDL functions
global function SDL_Init(flags: uint32): int32 !cimport end
global function SDL_CreateWindow(title: cstring, x: cint, y: cint, w: cint, h: cint, flags: uint32): SDL_WindowPtr !cimport end
global function SDL_Quit() !cimport end
global function SDL_DestroyWindow(window: SDL_WindowPtr) !cimport end
global function SDL_PollEvent(event: SDL_Event*): int32 !cimport end
global function SDL_GetTicks(): uint32 !cimport end
global function SDL_Delay(ms: uint32) !cimport end
global function SDL_CreateRGBSurfaceWithFormatFrom(pixels: pointer, width: cint,height: cint, depth: cint, pitch: cint,format: uint32): SDL_Surface !cimport end
global function SDL_FreeSurface(surface: SDL_Surface) !cimport end
global function SDL_LockSurface(surface: SDL_Surface) !cimport end
global function SDL_GetWindowSurface(window: SDL_WindowPtr): SDL_Surface !cimport end
global function SDL_BlitSurface(src: SDL_Surface, srcrect: SDL_Rect*, dst: SDL_Surface, dstrect: SDL_Rect*): cint !cimport end
global function SDL_UpdateWindowSurface(window: SDL_WindowPtr) !cimport end
global function SDL_CreateRenderer(window: SDL_WindowPtr, index: cint, flags: uint32): SDL_RendererPtr !cimport end
global function SDL_DestroyRenderer(renderer: SDL_RendererPtr) !cimport end
global function SDL_RenderPresent(renderer: SDL_RendererPtr) !cimport end
global function SDL_RenderClear(renderer: SDL_RendererPtr) !cimport end
global function SDL_CreateTexture(renderer: SDL_RendererPtr, format: uint32, access: cint, w: cint, h: cint): SDL_TexturePtr !cimport end
global function SDL_DestroyTexture(texture: SDL_TexturePtr) !cimport end
global function SDL_RenderCopy(renderer: SDL_RendererPtr, texture: SDL_TexturePtr, srcrect: SDL_Rect*, dstrect: SDL_Rect*): cint !cimport end
global function SDL_LockTexture(texture: SDL_TexturePtr, rect: SDL_Rect*, pixels: pointer*, pitch: cint*): cint !cimport end
global function SDL_UnlockTexture(texture: SDL_TexturePtr) !cimport end
global function SDL_SetRenderDrawBlendMode(renderer: SDL_RendererPtr, blendMode: int32): cint !cimport end
global function SDL_SetTextureBlendMode(texture: SDL_TexturePtr, blendMode: int32): cint !cimport end
global function SDL_UpdateTexture(texture: SDL_TexturePtr, rect: SDL_Rect*, pixels: pointer, pitch: cint): cint !cimport end
global function SDL_GetError(): cstring !cimport end
