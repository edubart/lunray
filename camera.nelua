global Camera = @record{
  lower_left_corner: vec3,
  lower_left_corner_direction: vec3,
  horizontal: vec3,
  vertical: vec3,
  origin: vec3,
  lookat: vec3,
  vup: vec3,
  u: vec3,
  v: vec3,
  w: vec3,
  lensradius: float,
  vfov: float,
  aspect: float,
  aperture: float,
  focusdist: float,
}

function Camera:update()
  local theta = self.vfov*math.pi/180
  local half_height = math.tan(theta/2)
  local half_width = self.aspect * half_height
  self.w = vec3.unit(vec3.sub(self.origin, self.lookat))
  self.u = vec3.unit(vec3.cross(self.vup, self.w))
  self.v = vec3.cross(self.w, self.u)
  self.lower_left_corner = vec3.sub(self.origin,
    vec3.add(vec3.add(vec3.smul(self.u, half_width*self.focusdist),
                      vec3.smul(self.v, half_height*self.focusdist)),
             vec3.smul(self.w, self.focusdist)))
  self.lower_left_corner_direction = vec3.sub(self.lower_left_corner, self.origin)
  self.horizontal = vec3.smul(self.u, 2*half_width*self.focusdist)
  self.vertical = vec3.smul(self.v, 2*half_height*self.focusdist)
  self.lensradius = self.aperture / 2
end

function Camera.create(lookfrom: vec3, lookat: vec3, vup: vec3,
                       vfov: float, aspect: float, aperture: float, focusdist: float): Camera
  if aperture == 0 then
    focusdist = 1
  end
  local self = Camera{
    origin = lookfrom,
    lookat = lookat,
    vup = vup,
    vfov = vfov,
    aspect = aspect,
    focusdist = focusdist,
    aperture = aperture
  }
  self:update()
  return self
end

function Camera:getray(u: float, v: float)
  local r: Ray
  if self.aperture ~= 0 then
    local rd = vec3.random_in_disk(self.lensradius)
    local offset = vec3.add(vec3.smul(self.u, rd.x), vec3.smul(self.v, rd.y))
    r.origin = vec3.add(self.origin, offset)
    r.direction = vec3.sub(vec3.add(self.lower_left_corner, vec3.add(vec3.smul(self.horizontal, u), vec3.smul(self.vertical, v))), r.origin)
  else
    r.origin = self.origin
    r.direction = vec3.add(self.lower_left_corner_direction, vec3.add(vec3.smul(self.horizontal, u), vec3.smul(self.vertical, v)))
  end
  return r
end

function Camera:rotate(x: float, y: float)
  local dir = vec3.sub(self.lookat, self.origin)
  dir = vec3.rotvec(dir, self.u, x)
  dir = vec3.rotvec(dir, self.v, y)
  self.lookat = vec3.add(self.origin, dir)
  self:update()
end

function Camera:translate(x: float, y: float, z: float)
  local trans = vec3{0,0,0}
  trans = vec3.add(trans, vec3.smul(self.u, x))
  trans = vec3.add(trans, vec3.smul(self.w,-z))
  trans = vec3.add(trans, vec3.smul(self.v, y))
  self.origin = vec3.add(self.origin, trans)
  self.lookat = vec3.add(self.lookat, trans)
  self:update()
end
