--## strict = true

-- optimize for performance
## cflags '-O3 -ffast-math -march=native -fno-plt -fopenmp -rdynamic -g'

[##[
modname = 'lunray'
nohashcodenames = true
CARTOONIZED = true
DENOISER = true
]##]

--TODO: multidimensional arrays shortcut swap?
--TODO: record field aliases
--TODO: record operators
--TODO: record overloading
--TODO: math library
--TODO: evaluate const numeric expressions
--TODO: optional type

require 'basetypes'
require 'math'
require 'vec3'
require 'mat4'
require 'perlin'
require 'sdl2'
require 'ray'
require 'texture'
require 'material'
require 'sphere'
require 'camera'
require 'window'

local SCREEN_WIDTH !compconst = 960--480
local SCREEN_HEIGHT !compconst = 540--270
local NUMSAMPLES !compconst = 1
local MAXDEPTH !compconst = 16

local worldsize
local Hitlist = @array(Sphere,500)
local world: Hitlist
local cam: Camera
local window: Window
local pixels: argbcolor[SCREEN_WIDTH][SCREEN_HEIGHT] !aligned(16)
## if DENOISER then
local tempixels: vec3[SCREEN_WIDTH][SCREEN_HEIGHT] !aligned(16)
local ntem = 0
## end

local function Hitlist_hit(self: Hitlist*, r: Ray, tmin: float, tmax: float): boolean, Hit
  local rec: Hit
  local tnear = tmax
  local hashit = false
  for i=0,<worldsize do
    local hitted, temprec = Sphere.hit(self[i], r, tmin, tnear)
    if hitted and temprec.t < tnear then
      hashit = true
      tnear = temprec.t
      rec = temprec
    end
  end
  return hashit, rec
end

local function sky_color(direction: vec3)
  local t = 0.5*(direction.y/vec3.length(direction) + 1)
  return vec3.lerp(vec3{1,1,1}, vec3{0.5, 0.7, 1}, t)
end

local function trace_ray(r: Ray, depth: integer): vec3 !noinline
  local hitted, rec = Hitlist_hit(world, r, 0.001, 1e32)
  if hitted then
    local emitted = Material.emitted(rec.mat, rec.uv, rec.p)
    if depth > MAXDEPTH then
      return emitted
    end
    local forward, attenuation, scattered = Material.scatter(rec.mat, r, rec)
    if forward then
      return vec3.add(emitted, vec3.mul(trace_ray(scattered, depth+1), attenuation))
    else
      return emitted
    end
  end
  return sky_color(r.direction)
end

local function trace_rays() !noinline
  ## if DENOISER then
    if ntem == 0 then
      for y=0,<SCREEN_HEIGHT do
        for x=0,<SCREEN_WIDTH do
          tempixels[y][x] = vec3{}
        end
      end
    end
    ntem = ntem + 1
  ## end
  local yoff = window.height - 1
  ## cemit '#pragma omp parallel for schedule(dynamic)'
  for y=0,<SCREEN_HEIGHT do
    for x=0,<SCREEN_WIDTH do
      ## if symbols.NUMSAMPLES.attr.value:tonumber() == 1 then
        local v, u
        ## if DENOISER then
          v, u = (y + math.random() - 0.5) / @float(SCREEN_HEIGHT), (x + math.random() - 0.5) / @float(SCREEN_WIDTH)
        ## else
          v, u =  y / @float(SCREEN_HEIGHT), x / @float(SCREEN_WIDTH)
        ## end
        local col = trace_ray(Camera.getray(cam, u, v), 0)
      ## else
        local col: vec3
        for i=1,NUMSAMPLES do
          local v, u = (y + math.random() - 0.5) / @float(SCREEN_HEIGHT), (x + math.random() - 0.5) / @float(SCREEN_WIDTH)
          col = vec3.add(col, trace_ray(Camera.getray(cam, u, v), 0))
        end
        col = vec3.sdiv(col, NUMSAMPLES)
      ## end
      col = vec3.sqrt(col) -- gamma correction
      col = vec3.min(col, vec3{1,1,1})
      ## if DENOISER then
        tempixels[y][x] = vec3.add(tempixels[y][x], col)
        pixels[yoff - y][x] = argbcolor.fromvec3(vec3.sdiv(tempixels[y][x], ntem))
      ## else
        pixels[yoff - y][x] = argbcolor.fromvec3(col)
      ## end
    end
  end
end

local function refresh()
  ## if DENOISER then
  ntem = 0
  ## end
end

local function poll_events() !noinline
  local event: SDL_Event
  while SDL_PollEvent(event) ~= 0 do
    switch event.type
    case SDL_QUIT then
      return false
    case SDL_KEYDOWN then
      local kevent = @SDL_KeyboardEvent*(&event)
      switch kevent.keysym.sym
      case SDLK_UP then
        cam:rotate(0.1, 0)
        refresh()
      case SDLK_DOWN then
        cam:rotate(-0.1, 0)
        refresh()
      case SDLK_RIGHT then
        cam:rotate(0, -0.1)
        refresh()
      case SDLK_LEFT then
        cam:rotate(0, 0.1)
        refresh()
      case SDLK_ESCAPE then
        return false
      case SDLK_w then
        cam:translate(0, 0, 0.1)
        refresh()
      case SDLK_s then
        cam:translate(0, 0, -0.1)
        refresh()
      case SDLK_a then
        cam:translate(-0.1, 0, 0)
        refresh()
      case SDLK_d then
        cam:translate(0.1, 0, 0)
        refresh()
      case SDLK_e then
        cam:translate(0, 0.1, 0)
        refresh()
      case SDLK_q then
        cam:translate(0, -0.1, 0)
        refresh()
      end
    end
  end
  return true
end


local function world_init()
  world[1] = Sphere{center={ 0,-1000,0}, radius=1000, mat={MATERIALS.LAMBERTIAN, albedo={TEXTURES.CHECKER, color={0.2, 0.3, 0.1}, scale=10}}}
  world[3] = Sphere{center={ 0,    1,0}, radius=1, mat={MATERIALS.DIELECTRIC, fuzz=1.5}}
  world[2] = Sphere{
    center={-4,1,0},
    radius=1,
    mat={
      MATERIALS.LAMBERTIAN,
      albedo={
        TEXTURES.NOISE,
        color={1, 1, 1},
        scale=9
      },
      emitting={
        TEXTURES.COLOR,
        color={0.9,0.3,0.0}
      }
    }
  }
  world[4] = Sphere{center={ 4,    1,0}, radius=1, mat={MATERIALS.METAL, albedo={TEXTURES.COLOR, {0.7, 0.6, 0.5}}}}

  local i = 5
  local NUMSPHERES !compconst = 1
  for a=-NUMSPHERES,<NUMSPHERES do
    for b=-NUMSPHERES,<NUMSPHERES do
      local choosemat = math.random()
      local center = vec3{a+0.9*math.random(), 0.2, b+0.9*math.random()}
      if vec3.length(vec3.sub(center, vec3{4,0.2,0})) > 0.9 then
        if choosemat < 0.8 then --diffuse
          world[i] = Sphere{center=center, radius=0.2, mat={MATERIALS.LAMBERTIAN, albedo={TEXTURES.COLOR, {math.random()*math.random(), math.random()*math.random(), math.random()*math.random()}}}}
        elseif choosemat < 0.95 then -- metal
          world[i] = Sphere{center=center, radius=0.2, mat={MATERIALS.METAL, albedo={TEXTURES.COLOR, {0.5*(1+math.random()), 0.5*(1+math.random()), 0.5*(1+math.random())}}, fuzz=0.5*math.random()}}
        else -- glass
          world[i] = Sphere{center=center, radius=0.2, mat={MATERIALS.DIELECTRIC, fuzz=1.5}}
        end
        i = i + 1
      end
    end
  end
  worldsize = i

  local lookfrom = vec3{2,3,2}
  local lookat = vec3{0,1,0}
  local vup = vec3{0,1,0}
  local vfov = 59
  local aspect = SCREEN_WIDTH/@float(SCREEN_HEIGHT)
  local aperture: float = 0--0.1
  local focusdist: float = 10
  cam = Camera.create(lookfrom, lookat, vup, vfov, aspect, aperture, focusdist)
end

local function go()
  world_init()
  window = Window.create(SCREEN_WIDTH, SCREEN_HEIGHT)

  -- draw
  local lastticks = SDL_GetTicks()
  local fps = 0
  repeat
    local ticks = SDL_GetTicks()
    if ticks - lastticks >= 1000 then
      print('FPS', fps)
      lastticks = ticks
      fps = 0
    end

    local quit = not poll_events()
    trace_rays()
    Window.uploadpixels(window, &pixels[0][0])
    fps = fps + 1
  until quit

  Window.destroy(window)
end

go()
