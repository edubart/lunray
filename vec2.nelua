global vec2 = @record {
  x: number,
  y: number
}
## vec2.value.is_vec2 = true

local is_vec2_or_arithmetic = #[concept(function(b)
  return b.type.is_vec2 or b.type.is_arithmetic
end)]#

function vec2.__add(a: is_vec2_or_arithmetic, b: is_vec2_or_arithmetic): vec2 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec2{a.x + b, a.y + b}
  ## elseif a.type.is_arithmetic then
    return vec2{a + b.x, a + b.y}
  ## else
    return vec2{a.x + b.x, a.y + b.y}
  ## end
end

function vec2.__sub(a: is_vec2_or_arithmetic, b: is_vec2_or_arithmetic): vec2 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec2{a.x - b, a.y - b}
  ## elseif a.type.is_arithmetic then
    return vec2{a - b.x, a - b.y}
  ## else
    return vec2{a.x - b.x, a.y - b.y}
  ## end
end

function vec2.__mul(a: is_vec2_or_arithmetic, b: is_vec2_or_arithmetic): vec2 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec2{a.x * b, a.y * b}
  ## elseif a.type.is_arithmetic then
    return vec2{a * b.x, a * b.y}
  ## else
    return vec2{a.x * b.x, a.y * b.y}
  ## end
end

function vec2.__div(a: is_vec2_or_arithmetic, b: is_vec2_or_arithmetic): vec2 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    local k: number = 1 / b
    return vec2{a.x * k, a.y * k}
  ## elseif a.type.is_arithmetic then
    local k: number = 1 / a
    return vec2{k * b.x, k * b.y}
  ## else
    return vec2{a.x / b.x, a.y / b.y}
  ## end
end

function vec2.__len(a: vec2): number <inline,nosideeffect>
  return math.sqrt(a.x * a.x + a.y * a.y)
end

function vec2.abs(a: vec2): vec2 <inline,nosideeffect>
  return vec2{math.abs(a.x), math.abs(a.y)}
end

function vec2.max(a: vec2, b: vec2): vec2 <inline,nosideeffect>
  return vec2{math.max(a.x, b.x), math.max(a.y, b.y)}
end
