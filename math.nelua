local function math_drand48(): float64 !cimport('drand48') end
## if false then
local float = @float64
local int = @int64
local function math_sqrt(x: float64): float64 !cimport('sqrt') end
local function math_sin(x: float64): float64 !cimport('sin') end
local function math_asin(x: float64): float64 !cimport('asin') end
local function math_cos(x: float64): float64 !cimport('cos') end
local function math_pow(a: float64, b: float64): float64 !cimport('pow') end
local function math_tan(x: float64): float64 !cimport('tan') end
local function math_atan2(x: float64, y: float64): float64 !cimport('atan2') end
local function math_abs(x: float64): float64 !cimport('fabs') end
local function math_floor(x: float64): float64 !cimport('floor') end
local function math_min(a: float64, b: float64): float64 !cimport('fmin') end
local function rand(): float64 return math_drand48() end
## else
local float = @float32
local int = @int32
local function math_sqrt(x: float32): float32 !cimport('sqrtf') end
local function math_sin(x: float32): float32 !cimport('sinf') end
local function math_asin(x: float32): float32 !cimport('asinf') end
local function math_cos(x: float32): float32 !cimport('cosf') end
local function math_pow(a: float32, b: float32): float32 !cimport('powf') end
local function math_tan(x: float32): float32 !cimport('tan') end
local function math_atan2(x: float32, y: float32): float32 !cimport('atan2f') end
local function math_abs(x: float32): float32 !cimport('fabsf') end
local function math_min(a: float64, b: float64): float64 !cimport('fminf') end
local function math_floor(x: float64): float64 !cimport('floorf') end
## end

local compconst math_pi: float = 3.141592653589793

local seed: int32 = 0
local function frand(): float
  seed = (214013*seed+2531011)
  return ((seed >> 16) & 32767) / @float(32768)
end

local function rand(): float
  return math_drand48()
end
