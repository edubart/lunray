global MATERIALS = @enum {
  LAMBERTIAN = 0,
  METAL = 1,
  DIELECTRIC = 2
}

global Material = @record{
  kind: MATERIALS,
  albedo: Texture,
  emitting: Texture,
  fuzz: float
}

global Hit = @record{
  p: vec3,
  normal: vec3,
  uv: vec2,
  mat: Material*,
  t: float
}

function reflect(v: vec3, n: vec3): vec3
  return vec3.sub(v, vec3.smul(n, 2*vec3.dot(v,n)))
end

function refract(v: vec3, n: vec3, ni: float): (boolean, vec3)
  local uv = vec3.unit(v)
  local dt = vec3.dot(uv, n)
  local discriminant = 1 - ni*ni*(1-dt*dt)
  if discriminant > 0 then
    local refracted = vec3.sub(
      vec3.smul(vec3.sub(uv, vec3.smul(n, dt)), ni),
      vec3.smul(n, mathx.sqrt(discriminant)))
    return true, refracted
  else
    return false, vec3{}
  end
end

function schlick(cosine: float, refidx: float): float
  local r0 = (1-refidx) / (1+refidx)
  r0 = r0*r0
  return r0 + (1-r0)*((1-cosine)^5)
end

function Material:lambertian_scatter(r: Ray, rec: Hit): (boolean, vec3, Ray)
  local scattered = Ray{rec.p}
  ## if CARTOONIZED then
    scattered.direction = vec3{0,1,0}
  ## else
    scattered.direction = vec3.random_in_hemisphere(rec.normal)
  ## end
  return true, self.albedo:color(rec.uv, rec.p), scattered
end

function Material:metal_scatter(r: Ray, rec: Hit): (boolean, vec3, Ray)
  local reflected = reflect(vec3.unit(r.direction), rec.normal)
  ## if not CARTOONIZED then
    if self.fuzz > 0 then
      reflected = vec3.add(reflected, vec3.smul(vec3.random_in_hemisphere(rec.normal), self.fuzz))
    end
  ## end
  local scattered = Ray{rec.p, reflected}
  local forward = vec3.dot(scattered.direction, rec.normal) > 0
  return forward, self.albedo:color(rec.uv, rec.p), scattered
end

function Material:dielectric_scatter(r: Ray, rec: Hit): (boolean, vec3, Ray)
  local outward_normal: vec3
  local ni: float, reflectprob: float
  local cosine = vec3.dot(r.direction, rec.normal) / vec3.length(r.direction)
  if vec3.dot(r.direction, rec.normal) > 0 then
    cosine = mathx.sqrt(1 - self.fuzz*self.fuzz*(1-cosine*cosine))
    outward_normal = vec3.neg(rec.normal)
    ni = self.fuzz
  else
    cosine = -cosine
    outward_normal = rec.normal
    ni = 1 / self.fuzz
  end
  local forward, refracted = refract(r.direction, outward_normal, ni)
  local scattered = Ray{rec.p}
  ## if not CARTOONIZED then
    if forward then
      reflectprob = schlick(cosine, self.fuzz)
    else
      reflectprob = 1
    end
    if math.random() < reflectprob then
      scattered.direction = reflect(vec3.unit(r.direction), rec.normal)
    else
      scattered.direction = refracted
    end
  ## else
    scattered.direction = refracted
  ## end
  return true, vec3{1,1,1}, scattered
end

function Material:scatter(r: Ray, rec: Hit): (boolean, vec3, Ray)
  switch self.kind
  case MATERIALS.LAMBERTIAN then
    return self:lambertian_scatter(r, rec)
  case MATERIALS.METAL then
    return self:metal_scatter(r, rec)
  case MATERIALS.DIELECTRIC then
    return self:dielectric_scatter(r, rec)
  end
  return false, vec3{}, Ray{}
end

function Material:emitted(uv: vec2, p: vec3): vec3
  return Texture.color(self.emitting, uv, p)
end
