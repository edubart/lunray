global vec3 --[[<aligned(16)>]] = @record{
  x: float,
  y: float,
  z: float
}

function vec3.add(a: vec3, b: vec3): vec3
  return vec3{a.x+b.x, a.y+b.y, a.z+b.z}
end

function vec3.eadd(a: vec3, x: float): vec3
  return vec3{a.x+x, a.y+x, a.z+x}
end

function vec3.mul(a: vec3, b: vec3): vec3
  return vec3{a.x*b.x, a.y*b.y, a.z*b.z}
end

function vec3.addmul(a: vec3, b: vec3, factor: float): vec3
  return vec3{a.x+factor*b.x, a.y+factor*b.y, a.z+factor*b.z}
end

function vec3.sub(a: vec3, b: vec3): vec3
  return vec3{a.x-b.x, a.y-b.y, a.z-b.z}
end

function vec3.min(a: vec3, b: vec3): vec3
  return vec3{mathx.min(a.x, b.x), mathx.min(a.y, b.y), mathx.min(a.z, b.z)}
end

function vec3.neg(a: vec3): vec3
  return vec3{-a.x, -a.y, -a.z}
end

function vec3.dot(a: vec3, b: vec3): float
  return a.x*b.x + a.y*b.y + a.z*b.z
end

function vec3.cross(a: vec3, b: vec3): vec3
  return vec3{a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x}
end

function vec3.sqrt(a: vec3): vec3
  return vec3{mathx.sqrt(a.x), mathx.sqrt(a.y), mathx.sqrt(a.z)}
end

function vec3.smul(a: vec3, factor: float): vec3
  return vec3{a.x*factor, a.y*factor, a.z*factor}
end

function vec3.sdiv(a: vec3, factor: float): vec3
  local k = 1 / factor
  return vec3{a.x*k, a.y*k, a.z*k}
end

function vec3.squaredlength(v: vec3): float
  return v.x*v.x + v.y*v.y + v.z*v.z
end

function vec3.length(v: vec3): float
  return mathx.sqrt(vec3.squaredlength(v))
end

function vec3.unit(v: vec3): vec3
  return vec3.sdiv(v, vec3.length(v))
end

function vec3.lerp(a: vec3, b: vec3, t: float): vec3
  return vec3.add(vec3.smul(a, 1-t), vec3.smul(b, t))
end

function vec3.print(v: vec3)
  print(v.x, v.y, v.z)
end

function vec3.rotvec(v: vec3, axis: vec3, theta: float): vec3
  local n = vec3.unit(axis)
  local w = vec3.cross(n, v)
  local sint, cost = mathx.sin(theta), mathx.cos(theta)
  local ns = vec3.dot(v, n) * (1 - cost)
  return vec3.add(vec3.smul(n, ns), vec3.add(vec3.smul(w, sint), vec3.smul(v, cost)))
end

function random_in_unit_sphere(): vec3
  local p: vec3
  repeat
    p = vec3.sub(vec3.smul(vec3{math.random(), math.random(), math.random()}, 2), vec3{1,1,1})
  until vec3.squaredlength(p) < 1 and vec3.squaredlength(p) > 0.1
  return p
end

function vec3.random_in_disk(length: float): vec3
  local theta = math.random()*mathx.pi*2
  local sint, cost = mathx.sin(theta), mathx.cos(theta)
  local rlen = mathx.sqrt(math.random())*length
  return vec3{rlen*cost, rlen*sint, 0}
end

function vec3.random_in_hemisphere(n: vec3)
  local theta, len = math.random()*2*mathx.pi, math.random()
  local w
  if mathx.abs(n.y) > 0.5 then
    w = vec3{1,0,0}
  else
    w = vec3{0,1,0}
  end
  local u = vec3.unit(vec3.cross(n, w))
  local v = vec3.cross(u, n)
  local sint, cost = mathx.sin(theta), mathx.cos(theta)
  local r = mathx.sqrt(len)
  local rx, ry, rz = r*cost, r*sint, mathx.sqrt(1 - len)
  local rr = vec3.add(vec3.add(vec3.smul(u, rx), vec3.smul(v, ry)), vec3.smul(n,rz))
  return vec3.unit(rr)
end
