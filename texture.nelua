global TEXTURES = @enum {
  COLOR = 0,
  CHECKER = 1,
  NOISE = 2,
}

global Texture = @record {
  kind: TEXTURES,
  color: vec3,
  scale: number
}

function Texture:color_color(uv: vec2, p: vec3): vec3
  return self.color
end

function Texture:checker_color(uv: vec2, p: vec3): vec3
  local sines = math.fastsin(10*p.x)*math.fastsin(10*p.y)*math.fastsin(10*p.z)
  if sines < 0 then
    return vec3{1,1,1}
  else
    return self.color
  end
end

function Texture:noise_color(uv: vec2, p: vec3): vec3
  local ticks: number = SDL_GetTicks() / 10000
  local offset = vec3{ticks, ticks, ticks}
  local noise = Perlin.turb((p + offset) * self.scale, 1)

  --local noise = 0.5*(1+Perlin.turb(p * self.scale, 2))
  return self.color * noise
end

function Texture:color(uv: vec2, p: vec3): vec3
  switch self.kind
  case TEXTURES.COLOR then
    return Texture.color_color(self, uv, p)
  case TEXTURES.CHECKER then
    return Texture.checker_color(self, uv, p)
  case TEXTURES.NOISE then
    return Texture.noise_color(self, uv, p)
  end
  return vec3{}
end
