## strict = true

require 'math'

global int = @int64

## if FLOAT64 then
global float = @float64
global math.inf: float <const,cimport'INFINITY'>
## else
global float = @float32
global math.inf: float <const,cimport'INFINITY',nodecl>
## end

global math.tau: float <comptime> = 6.283185307179586

function math.clamp(x: float, min: float, max: float): float
  return math.max(math.min(x, max), min)
end

function math.smoothstep(edge0: float, edge1: float, x: float): float
  local t = math.clamp((x - edge0) / (edge1 - edge0), 0, 1)
  return t * t * (3 - 2 * t)
end

function math.step(edge: float, x: float): float
  if x < edge then
    return 0
  else
    return 1
  end
end

function math.fastexp4(x: float): float
  x = 1.0 + x * (1.0 / 17.0)
  local t = x
  ## for i=1,4 do
    t=t*t
  ## end
  return math.max(t*x,0.0)
end

function math.fastexp8(x: float): float
  x = 1.0 + x * (1.0 / 257.0)
  local t = x
  ## for i=1,8 do
    t=t*t
  ## end
  return math.max(t*x,0.0)
end

function math.fract(x: float): float
  return x - math.floor(x)
end

function math.fastsin(x: float): float
  x = x*(1.0/math.pi)
  local xi = math.floor(x)
  local xs = xi - 2*math.floor(0.5*x)
  local xf = x - xi
  return (1-2*xs)*(4*xf)*(1-xf)
end

function math.fastcos(x: float): float
  return math.fastsin(x + math.pi/2)
end
