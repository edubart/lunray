require 'math'

global math.tau: number <comptime> = 6.2831853071795865

function math.smoothstep(edge0: number, edge1: number, x: number): number <inline,nosideeffect>
  local t = math.clamp((x - edge0) / (edge1 - edge0), 0, 1)
  return t * t * (3 - 2 * t)
end

function math.step(edge: number, x: number): number <inline,nosideeffect>
  if x < edge then
    return 0
  else
    return 1
  end
end

function math.fastexp4(x: number): number <inline,nosideeffect>
  x = 1.0 + x * (1.0 / 17.0)
  local t = x
  ## for i=1,4 do
    t=t*t
  ## end
  return math.max(t*x,0.0)
end

function math.fastexp8(x: number): number <inline,nosideeffect>
  x = 1.0 + x * (1.0 / 257.0)
  local t = x
  ## for i=1,8 do
    t=t*t
  ## end
  return math.max(t*x,0.0)
end

function math.fastsin(x: number): number <inline,nosideeffect>
  x = x*(1.0/math.pi)
  local xi = math.floor(x)
  local xs = xi - 2*math.floor(0.5*x)
  local xf = x - xi
  return (1-2*xs)*(4*xf)*(1-xf)
end

function math.fastcos(x: number): number <inline,nosideeffect>
  return math.fastsin(x + math.pi/2)
end

local seed: uint32 = 1337
function math.fastrand(): number <inline,nosideeffect>
  seed = 214013 * seed + 2531011
  return (seed >> 8) / (1 << 24)
end
